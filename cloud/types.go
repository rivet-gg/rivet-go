// This file was auto-generated by Fern from our API Definition.

package cloud

import (
	fmt "fmt"
	uuid "github.com/google/uuid"
	rivetgo "github.com/rivet-gg/rivet-go"
	version "github.com/rivet-gg/rivet-go/cloud/version"
	matchmaker "github.com/rivet-gg/rivet-go/cloud/version/matchmaker"
	time "time"
)

// The current authenticated agent.
type AuthAgent struct {
	Identity  *AuthAgentIdentity  `json:"identity,omitempty"`
	GameCloud *AuthAgentGameCloud `json:"game_cloud,omitempty"`
}

// The current authenticated game cloud.
type AuthAgentGameCloud struct {
	GameId uuid.UUID `json:"game_id"`
}

// The current authenticated identity.
type AuthAgentIdentity struct {
	IdentityId uuid.UUID `json:"identity_id"`
}

// A build summary.
type BuildSummary struct {
	BuildId  uuid.UUID `json:"build_id"`
	UploadId uuid.UUID `json:"upload_id"`
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// RFC3339 timestamp.
	CreateTs time.Time `json:"create_ts"`
	// Unsigned 64 bit integer.
	ContentLength int64 `json:"content_length"`
	// Whether or not this build has completely been uploaded.
	Complete bool `json:"complete"`
}

// A value denoting what type of authentication to use for a game namespace's CDN.
type CdnAuthType string

const (
	CdnAuthTypeNone  CdnAuthType = "none"
	CdnAuthTypeBasic CdnAuthType = "basic"
)

func NewCdnAuthTypeFromString(s string) (CdnAuthType, error) {
	switch s {
	case "none":
		return CdnAuthTypeNone, nil
	case "basic":
		return CdnAuthTypeBasic, nil
	}
	var t CdnAuthType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CdnAuthType) Ptr() *CdnAuthType {
	return &c
}

// An authenticated CDN user for a given namespace.
type CdnNamespaceAuthUser struct {
	// A user name.
	User string `json:"user"`
}

// CDN configuration for a given namespace.
type CdnNamespaceConfig struct {
	// Whether or not to allow users to connect to the given namespace via domain name.
	EnableDomainPublicAuth bool `json:"enable_domain_public_auth"`
	// A list of CDN domains for a given namespace.
	Domains  []*CdnNamespaceDomain `json:"domains,omitempty"`
	AuthType CdnAuthType           `json:"auth_type,omitempty"`
	// A list of CDN authenticated users for a given namespace.
	AuthUserList []*CdnNamespaceAuthUser `json:"auth_user_list,omitempty"`
}

// A CDN domain for a given namespace.
type CdnNamespaceDomain struct {
	// A valid domain name (no protocol).
	Domain string `json:"domain"`
	// RFC3339 timestamp.
	CreateTs           time.Time                             `json:"create_ts"`
	VerificationStatus CdnNamespaceDomainVerificationStatus  `json:"verification_status,omitempty"`
	VerificationMethod *CdnNamespaceDomainVerificationMethod `json:"verification_method,omitempty"`
	VerificationErrors []string                              `json:"verification_errors,omitempty"`
}

// A union representing the verification method used for this CDN domain.
type CdnNamespaceDomainVerificationMethod struct {
	Invalid *rivetgo.EmptyObject                      `json:"invalid,omitempty"`
	Http    *CdnNamespaceDomainVerificationMethodHttp `json:"http,omitempty"`
}

type CdnNamespaceDomainVerificationMethodHttp struct {
	CnameRecord string `json:"cname_record"`
}

// A value denoting the status of a CDN domain's verification status.
type CdnNamespaceDomainVerificationStatus string

const (
	CdnNamespaceDomainVerificationStatusActive  CdnNamespaceDomainVerificationStatus = "active"
	CdnNamespaceDomainVerificationStatusPending CdnNamespaceDomainVerificationStatus = "pending"
	CdnNamespaceDomainVerificationStatusFailed  CdnNamespaceDomainVerificationStatus = "failed"
)

func NewCdnNamespaceDomainVerificationStatusFromString(s string) (CdnNamespaceDomainVerificationStatus, error) {
	switch s {
	case "active":
		return CdnNamespaceDomainVerificationStatusActive, nil
	case "pending":
		return CdnNamespaceDomainVerificationStatusPending, nil
	case "failed":
		return CdnNamespaceDomainVerificationStatusFailed, nil
	}
	var t CdnNamespaceDomainVerificationStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CdnNamespaceDomainVerificationStatus) Ptr() *CdnNamespaceDomainVerificationStatus {
	return &c
}

// A CDN site summary.
type CdnSiteSummary struct {
	SiteId   uuid.UUID `json:"site_id"`
	UploadId uuid.UUID `json:"upload_id"`
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// RFC3339 timestamp.
	CreateTs time.Time `json:"create_ts"`
	// Unsigned 64 bit integer.
	ContentLength int64 `json:"content_length"`
	// Whether or not this site has completely been uploaded.
	Complete bool `json:"complete"`
}

// A custom avatar summary.
type CustomAvatarSummary struct {
	UploadId uuid.UUID `json:"upload_id"`
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// RFC3339 timestamp.
	CreateTs time.Time `json:"create_ts"`
	// The URL of this custom avatar image. Only present if upload is complete.
	Url *string `json:"url,omitempty"`
	// Unsigned 64 bit integer.
	ContentLength int64 `json:"content_length"`
	// Whether or not this custom avatar has completely been uploaded.
	Complete bool `json:"complete"`
}

// A full game.
type GameFull struct {
	GameId uuid.UUID `json:"game_id"`
	// RFC3339 timestamp.
	CreateTs time.Time `json:"create_ts"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string `json:"name_id"`
	// Represent a resource's readable display name.
	DisplayName      string    `json:"display_name"`
	DeveloperGroupId uuid.UUID `json:"developer_group_id"`
	// Unsigned 32 bit integer.
	TotalPlayerCount int `json:"total_player_count"`
	// The URL of this game's logo image.
	LogoUrl *string `json:"logo_url,omitempty"`
	// The URL of this game's banner image.
	BannerUrl *string `json:"banner_url,omitempty"`
	// A list of namespace summaries.
	Namespaces []*NamespaceSummary `json:"namespaces,omitempty"`
	// A list of version summaries.
	Versions []*version.Summary `json:"versions,omitempty"`
	// A list of region summaries.
	AvailableRegions []*RegionSummary `json:"available_regions,omitempty"`
}

// Identity configuration for a given namespace.
type IdentityNamespaceConfig struct {
}

// KV configuration for a given namespace.
type KvNamespaceConfig struct {
}

// Analytical information about a lobby.
type LobbySummaryAnalytics struct {
	LobbyId      uuid.UUID `json:"lobby_id"`
	LobbyGroupId uuid.UUID `json:"lobby_group_id"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	LobbyGroupNameId string    `json:"lobby_group_name_id"`
	RegionId         uuid.UUID `json:"region_id"`
	// RFC3339 timestamp.
	CreateTs time.Time `json:"create_ts"`
	// Whether or not this lobby is ready.
	IsReady bool `json:"is_ready"`
	// Whether or not this lobby is idle.
	IsIdle bool `json:"is_idle"`
	// Whether or not this lobby is in a closed state.
	IsClosed bool `json:"is_closed"`
	// Whether or not this lobby is outdated.
	IsOutdated bool `json:"is_outdated"`
	// Unsigned 32 bit integer.
	MaxPlayersNormal int `json:"max_players_normal"`
	// Unsigned 32 bit integer.
	MaxPlayersDirect int `json:"max_players_direct"`
	// Unsigned 32 bit integer.
	MaxPlayersParty int `json:"max_players_party"`
	// Unsigned 32 bit integer.
	TotalPlayerCount int `json:"total_player_count"`
	// Unsigned 32 bit integer.
	RegisteredPlayerCount int `json:"registered_player_count"`
}

// A union representing the state of a lobby.
type LogsLobbyStatus struct {
	Running *rivetgo.EmptyObject    `json:"running,omitempty"`
	Stopped *LogsLobbyStatusStopped `json:"stopped,omitempty"`
}

// The status of a stopped lobby.
type LogsLobbyStatusStopped struct {
	StopTs time.Time `json:"stop_ts"`
	// Whether or not the lobby failed or stopped successfully.
	Failed bool `json:"failed"`
	// The exit code returned by the lobby's main process when stopped.
	ExitCode int `json:"exit_code"`
}

// A logs summary for a lobby.
type LogsLobbySummary struct {
	LobbyId     uuid.UUID `json:"lobby_id"`
	NamespaceId uuid.UUID `json:"namespace_id"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	LobbyGroupNameId string    `json:"lobby_group_name_id"`
	RegionId         uuid.UUID `json:"region_id"`
	// RFC3339 timestamp.
	CreateTs time.Time `json:"create_ts"`
	// RFC3339 timestamp.
	StartTs *time.Time `json:"start_ts,omitempty"`
	// RFC3339 timestamp.
	ReadyTs *time.Time       `json:"ready_ts,omitempty"`
	Status  *LogsLobbyStatus `json:"status,omitempty"`
}

// A performance mark.
type LogsPerfMark struct {
	// The label given to this performance mark.
	Label string `json:"label"`
	// RFC3339 timestamp.
	Ts    time.Time  `json:"ts"`
	RayId *uuid.UUID `json:"ray_id,omitempty"`
	ReqId *uuid.UUID `json:"req_id,omitempty"`
}

// A performance span.
type LogsPerfSpan struct {
	// The label given to this performance span.
	Label string `json:"label"`
	// RFC3339 timestamp.
	StartTs time.Time `json:"start_ts"`
	// RFC3339 timestamp.
	FinishTs *time.Time `json:"finish_ts,omitempty"`
	ReqId    *uuid.UUID `json:"req_id,omitempty"`
}

// A port configuration used to create development tokens.
type MatchmakerDevelopmentPort struct {
	Port      *int                    `json:"port,omitempty"`
	PortRange *matchmaker.PortRange   `json:"port_range,omitempty"`
	Protocol  matchmaker.PortProtocol `json:"protocol,omitempty"`
}

// Matchmaker configuration for a given namespace.
type MatchmakerNamespaceConfig struct {
	// Unsigned 32 bit integer.
	LobbyCountMax int `json:"lobby_count_max"`
	// Unsigned 32 bit integer.
	MaxPlayersPerClient int `json:"max_players_per_client"`
	// Unsigned 32 bit integer.
	MaxPlayersPerClientVpn int `json:"max_players_per_client_vpn"`
	// Unsigned 32 bit integer.
	MaxPlayersPerClientProxy int `json:"max_players_per_client_proxy"`
	// Unsigned 32 bit integer.
	MaxPlayersPerClientTor int `json:"max_players_per_client_tor"`
	// Unsigned 32 bit integer.
	MaxPlayersPerClientHosting int `json:"max_players_per_client_hosting"`
}

// Cloud configuration for a given namespace.
type NamespaceConfig struct {
	Cdn        *CdnNamespaceConfig        `json:"cdn,omitempty"`
	Matchmaker *MatchmakerNamespaceConfig `json:"matchmaker,omitempty"`
	Kv         *KvNamespaceConfig         `json:"kv,omitempty"`
	Identity   *IdentityNamespaceConfig   `json:"identity,omitempty"`
}

// A full namespace.
type NamespaceFull struct {
	NamespaceId uuid.UUID `json:"namespace_id"`
	// RFC3339 timestamp.
	CreateTs time.Time `json:"create_ts"`
	// Represent a resource's readable display name.
	DisplayName string    `json:"display_name"`
	VersionId   uuid.UUID `json:"version_id"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string           `json:"name_id"`
	Config *NamespaceConfig `json:"config,omitempty"`
}

// A namespace summary.
type NamespaceSummary struct {
	NamespaceId uuid.UUID `json:"namespace_id"`
	// RFC3339 timestamp.
	CreateTs time.Time `json:"create_ts"`
	// Represent a resource's readable display name.
	DisplayName string    `json:"display_name"`
	VersionId   uuid.UUID `json:"version_id"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string `json:"name_id"`
}

// A previously deployed namespace version.
type NamespaceVersion struct {
	// A universally unique identifier.
	NamespaceId string `json:"namespace_id"`
	// A universally unique identifier.
	VersionId string `json:"version_id"`
	// RFC3339 timestamp.
	DeployTs time.Time `json:"deploy_ts"`
}

// A region summary.
type RegionSummary struct {
	RegionId uuid.UUID `json:"region_id"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	RegionNameId string `json:"region_name_id"`
	// The server provider of this region.
	Provider string `json:"provider"`
	// A universal region label given to this region.
	UniversalRegion UniversalRegion `json:"universal_region,omitempty"`
	// Represent a resource's readable display name.
	ProviderDisplayName string `json:"provider_display_name"`
	// Represent a resource's readable display name.
	RegionDisplayName string `json:"region_display_name"`
}

// A region server tier.
type RegionTier struct {
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	TierNameId string `json:"tier_name_id"`
	// Together with the denominator, denotes the portion of the CPU a given server uses.
	RivetCoresNumerator int `json:"rivet_cores_numerator"`
	// Together with the numerator, denotes the portion of the CPU a given server uses.
	RivetCoresDenominator int `json:"rivet_cores_denominator"`
	// CPU frequency (MHz).
	Cpu int `json:"cpu"`
	// Allocated memory (MB).
	Memory int `json:"memory"`
	// Allocated disk space (MB).
	Disk int `json:"disk"`
	// Internet bandwidth (MB).
	Bandwidth int `json:"bandwidth"`
	// **Deprecated**
	// Price billed for every second this server is running (in quadrillionth USD, 1,000,000,000,000 = $1.00).
	PricePerSecond int `json:"price_per_second"`
}

// Metrics relating to a job service.
type SvcMetrics struct {
	// The job name.
	Job string `json:"job"`
	// CPU metrics.
	Cpu []float64 `json:"cpu,omitempty"`
	// Memory metrics.
	Memory []float64 `json:"memory,omitempty"`
	// Total allocated memory (MB).
	AllocatedMemory *float64 `json:"allocated_memory,omitempty"`
}

// A service performance summary.
type SvcPerf struct {
	// The name of the service.
	SvcName string `json:"svc_name"`
	// RFC3339 timestamp.
	Ts time.Time `json:"ts"`
	// Unsigned 64 bit integer.
	Duration int64      `json:"duration"`
	ReqId    *uuid.UUID `json:"req_id,omitempty"`
	// A list of performance spans.
	Spans []*LogsPerfSpan `json:"spans,omitempty"`
	// A list of performance marks.
	Marks []*LogsPerfMark `json:"marks,omitempty"`
}

type UniversalRegion string

const (
	UniversalRegionUnknown      UniversalRegion = "unknown"
	UniversalRegionLocal        UniversalRegion = "local"
	UniversalRegionAmsterdam    UniversalRegion = "amsterdam"
	UniversalRegionAtlanta      UniversalRegion = "atlanta"
	UniversalRegionBangalore    UniversalRegion = "bangalore"
	UniversalRegionDallas       UniversalRegion = "dallas"
	UniversalRegionFrankfurt    UniversalRegion = "frankfurt"
	UniversalRegionLondon       UniversalRegion = "london"
	UniversalRegionMumbai       UniversalRegion = "mumbai"
	UniversalRegionNewark       UniversalRegion = "newark"
	UniversalRegionNewYorkCity  UniversalRegion = "new_york_city"
	UniversalRegionSanFrancisco UniversalRegion = "san_francisco"
	UniversalRegionSingapore    UniversalRegion = "singapore"
	UniversalRegionSydney       UniversalRegion = "sydney"
	UniversalRegionTokyo        UniversalRegion = "tokyo"
	UniversalRegionToronto      UniversalRegion = "toronto"
	UniversalRegionWashingtonDc UniversalRegion = "washington_dc"
	UniversalRegionChicago      UniversalRegion = "chicago"
	UniversalRegionParis        UniversalRegion = "paris"
	UniversalRegionSeattle      UniversalRegion = "seattle"
	UniversalRegionSaoPaulo     UniversalRegion = "sao_paulo"
	UniversalRegionStockholm    UniversalRegion = "stockholm"
	UniversalRegionChennai      UniversalRegion = "chennai"
	UniversalRegionOsaka        UniversalRegion = "osaka"
	UniversalRegionMilan        UniversalRegion = "milan"
	UniversalRegionMiami        UniversalRegion = "miami"
	UniversalRegionJakarta      UniversalRegion = "jakarta"
	UniversalRegionLosAngeles   UniversalRegion = "los_angeles"
)

func NewUniversalRegionFromString(s string) (UniversalRegion, error) {
	switch s {
	case "unknown":
		return UniversalRegionUnknown, nil
	case "local":
		return UniversalRegionLocal, nil
	case "amsterdam":
		return UniversalRegionAmsterdam, nil
	case "atlanta":
		return UniversalRegionAtlanta, nil
	case "bangalore":
		return UniversalRegionBangalore, nil
	case "dallas":
		return UniversalRegionDallas, nil
	case "frankfurt":
		return UniversalRegionFrankfurt, nil
	case "london":
		return UniversalRegionLondon, nil
	case "mumbai":
		return UniversalRegionMumbai, nil
	case "newark":
		return UniversalRegionNewark, nil
	case "new_york_city":
		return UniversalRegionNewYorkCity, nil
	case "san_francisco":
		return UniversalRegionSanFrancisco, nil
	case "singapore":
		return UniversalRegionSingapore, nil
	case "sydney":
		return UniversalRegionSydney, nil
	case "tokyo":
		return UniversalRegionTokyo, nil
	case "toronto":
		return UniversalRegionToronto, nil
	case "washington_dc":
		return UniversalRegionWashingtonDc, nil
	case "chicago":
		return UniversalRegionChicago, nil
	case "paris":
		return UniversalRegionParis, nil
	case "seattle":
		return UniversalRegionSeattle, nil
	case "sao_paulo":
		return UniversalRegionSaoPaulo, nil
	case "stockholm":
		return UniversalRegionStockholm, nil
	case "chennai":
		return UniversalRegionChennai, nil
	case "osaka":
		return UniversalRegionOsaka, nil
	case "milan":
		return UniversalRegionMilan, nil
	case "miami":
		return UniversalRegionMiami, nil
	case "jakarta":
		return UniversalRegionJakarta, nil
	case "los_angeles":
		return UniversalRegionLosAngeles, nil
	}
	var t UniversalRegion
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UniversalRegion) Ptr() *UniversalRegion {
	return &u
}

type BootstrapCaptcha struct {
	Turnstile *BootstrapCaptchaTurnstile `json:"turnstile,omitempty"`
}

type BootstrapCaptchaTurnstile struct {
	SiteKey string `json:"site_key"`
}

// The type of cluster that the backend is currently running.
type BootstrapCluster string

const (
	BootstrapClusterEnterprise BootstrapCluster = "enterprise"
	BootstrapClusterOss        BootstrapCluster = "oss"
)

func NewBootstrapClusterFromString(s string) (BootstrapCluster, error) {
	switch s {
	case "enterprise":
		return BootstrapClusterEnterprise, nil
	case "oss":
		return BootstrapClusterOss, nil
	}
	var t BootstrapCluster
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BootstrapCluster) Ptr() *BootstrapCluster {
	return &b
}
