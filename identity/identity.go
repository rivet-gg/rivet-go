// This file was auto-generated by Fern from our API Definition.

package identity

import (
	uuid "github.com/google/uuid"
	rivetgo "github.com/rivet-gg/rivet-go"
	identity "github.com/rivet-gg/rivet-go/common/identity"
	upload "github.com/rivet-gg/rivet-go/upload"
	time "time"
)

type GetHandlesResponse struct {
	Identities []*identity.Handle     `json:"identities,omitempty"`
	Watch      *rivetgo.WatchResponse `json:"watch,omitempty"`
}

type GetProfileResponse struct {
	Identity *Profile               `json:"identity,omitempty"`
	Watch    *rivetgo.WatchResponse `json:"watch,omitempty"`
}

type GetSummariesResponse struct {
	Identities []*Summary             `json:"identities,omitempty"`
	Watch      *rivetgo.WatchResponse `json:"watch,omitempty"`
}

type ListFollowersResponse struct {
	Identities []*identity.Handle     `json:"identities,omitempty"`
	Anchor     *string                `json:"anchor,omitempty"`
	Watch      *rivetgo.WatchResponse `json:"watch,omitempty"`
}

type ListFollowingResponse struct {
	Identities []*identity.Handle     `json:"identities,omitempty"`
	Anchor     *string                `json:"anchor,omitempty"`
	Watch      *rivetgo.WatchResponse `json:"watch,omitempty"`
}

type ListFriendsResponse struct {
	Identities []*identity.Handle     `json:"identities,omitempty"`
	Anchor     *string                `json:"anchor,omitempty"`
	Watch      *rivetgo.WatchResponse `json:"watch,omitempty"`
}

type ListMutualFriendsResponse struct {
	Identities []*identity.Handle `json:"identities,omitempty"`
	Anchor     *string            `json:"anchor,omitempty"`
}

type ListRecentFollowersResponse struct {
	Identities []*identity.Handle     `json:"identities,omitempty"`
	Anchor     *string                `json:"anchor,omitempty"`
	Watch      *rivetgo.WatchResponse `json:"watch,omitempty"`
}

type PrepareAvatarUploadResponse struct {
	UploadId         uuid.UUID                `json:"upload_id"`
	PresignedRequest *upload.PresignedRequest `json:"presigned_request,omitempty"`
}

type SearchResponse struct {
	Identities []*identity.Handle `json:"identities,omitempty"`
	// The pagination anchor.
	Anchor *string `json:"anchor,omitempty"`
}

type SetupResponse struct {
	// Token used to authenticate the identity.
	// Should be stored somewhere permanent.
	// Pass this to `rivet.api.identity#Setup$existing_identity_token` next time `rivet.api.identity#Setup` is called.
	// Token has a 90 day TTL.
	// This means that if `rivet.api.identity#Setup` is not called again within 90 days, the token will no longer be valid.
	// If this happens, the user can recover their account through the linking process (see `rivet.api.identity#PrepareGameLink`).
	// This token should be stored locally and never sent to a server or another device.
	// If this token is compromised, anyone with access to this token has control of the identity.
	IdentityToken rivetgo.Jwt `json:"identity_token"`
	// If this token is comprimised, anyone with access to this token has control of the identity.
	IdentityTokenExpireTs time.Time `json:"identity_token_expire_ts"`
	// Information about the identity that was just authenticated.
	Identity *Profile  `json:"identity,omitempty"`
	GameId   uuid.UUID `json:"game_id"`
}
