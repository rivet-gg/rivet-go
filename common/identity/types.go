// This file was auto-generated by Fern from our API Definition.

package identity

import (
	fmt "fmt"
	uuid "github.com/google/uuid"
	rivetgo "github.com/rivet-gg/rivet-go"
	game "github.com/rivet-gg/rivet-go/common/game"
	time "time"
)

// External links for an identity.
type ExternalLinks struct {
	// A link to this identity's profile page.
	Profile string `json:"profile"`
	// A link to the Rivet settings page.
	Settings *string `json:"settings,omitempty"`
}

// The game an identity is currently participating in.
type GameActivity struct {
	Game *game.Handle `json:"game,omitempty"`
	// A short activity message about the current game activity.
	Message string `json:"message"`
	// JSON data seen by anyone.
	PublicMetadata interface{} `json:"public_metadata,omitempty"`
	// JSON data seen only by the given identity and their mutual followers.
	MutualMetadata interface{} `json:"mutual_metadata,omitempty"`
}

// An identity handle.
type Handle struct {
	IdentityId    uuid.UUID             `json:"identity_id"`
	DisplayName   rivetgo.DisplayName   `json:"display_name"`
	AccountNumber rivetgo.AccountNumber `json:"account_number"`
	// The URL of this identity's avatar image.
	AvatarUrl string    `json:"avatar_url"`
	Presence  *Presence `json:"presence,omitempty"`
	// Whether or not this identity is registered with a linked account.
	IsRegistered bool           `json:"is_registered"`
	External     *ExternalLinks `json:"external,omitempty"`
}

// Information about the identity's current status, party, and active game.
type Presence struct {
	UpdateTs     time.Time     `json:"update_ts"`
	Status       Status        `json:"status,omitempty"`
	GameActivity *GameActivity `json:"game_activity,omitempty"`
}

// The current status of an identity. This helps players understand if another player is currently playing or has their game in the background.
type Status string

const (
	StatusOnline  Status = "online"
	StatusAway    Status = "away"
	StatusOffline Status = "offline"
)

func NewStatusFromString(s string) (Status, error) {
	switch s {
	case "online":
		return StatusOnline, nil
	case "away":
		return StatusAway, nil
	case "offline":
		return StatusOffline, nil
	}
	var t Status
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s Status) Ptr() *Status {
	return &s
}
