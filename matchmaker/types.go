// This file was auto-generated by Fern from our API Definition.

package matchmaker

import (
	uuid "github.com/google/uuid"
	rivetgo "github.com/rivet-gg/rivet-go"
	geo "github.com/rivet-gg/rivet-go/geo"
)

// A game mode that the player can join.
type GameModeInfo struct {
	GameModeId rivetgo.Identifier `json:"game_mode_id"`
}

// A matchmaker lobby.
type JoinLobby struct {
	LobbyId uuid.UUID   `json:"lobby_id"`
	Region  *JoinRegion `json:"region,omitempty"`
	// **Deprecated**
	Ports map[string]*JoinPort `json:"ports,omitempty"`
	// **Deprecated**
	Player *JoinPlayer `json:"player,omitempty"`
}

// A matchmaker lobby player.
type JoinPlayer struct {
	// Pass this token through the socket to the lobby server. The lobby server will validate this token with `PlayerConnected.player_token`
	Token rivetgo.Jwt `json:"token"`
}

type JoinPort struct {
	// The host for the given port. Will be null if using a port range.
	Host     *string `json:"host,omitempty"`
	Hostname string  `json:"hostname"`
	// The port number for this lobby. Will be null if using a port range.
	Port *int `json:"port,omitempty"`
	// Whether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.
	PortRange *JoinPortRange `json:"port_range,omitempty"`
	IsTls     bool           `json:"is_tls"`
}

// Inclusive range of ports that can be connected to.
type JoinPortRange struct {
	// Minimum port that can be connected to. Inclusive range.
	Min int `json:"min"`
	// Maximum port that can be connected to. Inclusive range.
	Max int `json:"max"`
}

// A matchmaker lobby region.
type JoinRegion struct {
	RegionId    rivetgo.Identifier  `json:"region_id"`
	DisplayName rivetgo.DisplayName `json:"display_name"`
}

// A public lobby in the lobby list.
type LobbyInfo struct {
	RegionId         string      `json:"region_id"`
	GameModeId       string      `json:"game_mode_id"`
	LobbyId          uuid.UUID   `json:"lobby_id"`
	MaxPlayersNormal int         `json:"max_players_normal"`
	MaxPlayersDirect int         `json:"max_players_direct"`
	MaxPlayersParty  int         `json:"max_players_party"`
	TotalPlayerCount int         `json:"total_player_count"`
	State            interface{} `json:"state,omitempty"`
}

// A region that the player can connect to.
type RegionInfo struct {
	RegionId                     rivetgo.Identifier `json:"region_id"`
	ProviderDisplayName          string             `json:"provider_display_name"`
	RegionDisplayName            string             `json:"region_display_name"`
	DatacenterCoord              *geo.Coord         `json:"datacenter_coord,omitempty"`
	DatacenterDistanceFromClient *geo.Distance      `json:"datacenter_distance_from_client,omitempty"`
}

type GameModeStatistics struct {
	PlayerCount int64                                    `json:"player_count"`
	Regions     map[rivetgo.Identifier]*RegionStatistics `json:"regions,omitempty"`
}

type RegionStatistics struct {
	PlayerCount int64 `json:"player_count"`
}
