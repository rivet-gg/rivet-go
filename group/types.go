// This file was auto-generated by Fern from our API Definition.

package group

import (
	fmt "fmt"
	uuid "github.com/google/uuid"
	rivetgo "github.com/rivet-gg/rivet-go"
	group "github.com/rivet-gg/rivet-go/common/group"
	identity "github.com/rivet-gg/rivet-go/common/identity"
	time "time"
)

type GetBansRequest struct {
	// The pagination anchor. Set to the returned anchor of this endpoint to receive the next set of items.
	Anchor *string `json:"-"`
	// Amount of bans to return.
	Count *float64 `json:"-"`
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type GetJoinRequestsRequest struct {
	// The pagination anchor. Set to the returned anchor of this endpoint to receive the next set of items.
	Anchor *string `json:"-"`
	// Amount of join requests to return.
	Count *float64 `json:"-"`
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type GetMembersRequest struct {
	// The pagination anchor. Set to the returned anchor of this endpoint to receive the next set of items.
	Anchor *string `json:"-"`
	// Amount of members to return.
	Count *float64 `json:"-"`
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type GetProfileRequest struct {
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type ListSuggestedRequest struct {
	// A query parameter denoting the requests watch index.
	WatchIndex *string `json:"-"`
}

type SearchRequest struct {
	// The query to match group display names against.
	Query  string  `json:"-"`
	Anchor *string `json:"-"`
	// Unsigned 32 bit integer.
	Limit *float64 `json:"-"`
}

// A banned identity.
type BannedIdentity struct {
	Identity *identity.Handle `json:"identity,omitempty"`
	// RFC3339 timestamp.
	BanTs time.Time `json:"ban_ts"`
}

// A group join request.
type JoinRequest struct {
	Identity *identity.Handle `json:"identity,omitempty"`
	// RFC3339 timestamp.
	Ts time.Time `json:"ts"`
}

// A group member.
type Member struct {
	Identity *identity.Handle `json:"identity,omitempty"`
}

// A list of group profiles.
type Profile struct {
	GroupId uuid.UUID `json:"group_id"`
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// The URL of this group's avatar image.
	AvatarUrl *string              `json:"avatar_url,omitempty"`
	External  *group.ExternalLinks `json:"external,omitempty"`
	// Whether or not this group is a developer.
	IsDeveloper *bool `json:"is_developer,omitempty"`
	// Detailed information about a profile.
	Bio string `json:"bio"`
	// Whether or not the current identity is a member of this group.
	IsCurrentIdentityMember *bool     `json:"is_current_identity_member,omitempty"`
	Publicity               Publicity `json:"publicity,omitempty"`
	// Unsigned 32 bit integer.
	MemberCount *int `json:"member_count,omitempty"`
	// A list of group members.
	Members []*Member `json:"members,omitempty"`
	// A list of group join requests.
	JoinRequests []*JoinRequest `json:"join_requests,omitempty"`
	// Whether or not the current identity is currently requesting to join this group.
	IsCurrentIdentityRequestingJoin *bool     `json:"is_current_identity_requesting_join,omitempty"`
	OwnerIdentityId                 uuid.UUID `json:"owner_identity_id"`
}

// The current publicity value for the given group.
type Publicity string

const (
	PublicityOpen   Publicity = "open"
	PublicityClosed Publicity = "closed"
)

func NewPublicityFromString(s string) (Publicity, error) {
	switch s {
	case "open":
		return PublicityOpen, nil
	case "closed":
		return PublicityClosed, nil
	}
	var t Publicity
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p Publicity) Ptr() *Publicity {
	return &p
}

type Summary struct {
	GroupId     uuid.UUID           `json:"group_id"`
	DisplayName rivetgo.DisplayName `json:"display_name"`
	// The URL of this group's avatar image.
	AvatarUrl *string              `json:"avatar_url,omitempty"`
	External  *group.ExternalLinks `json:"external,omitempty"`
	// Whether or not this group is a developer.
	IsDeveloper bool        `json:"is_developer"`
	Bio         rivetgo.Bio `json:"bio"`
	// Whether or not the current identity is a member of this group.
	IsCurrentIdentityMember bool      `json:"is_current_identity_member"`
	Publicity               Publicity `json:"publicity,omitempty"`
	MemberCount             int       `json:"member_count"`
	OwnerIdentityId         uuid.UUID `json:"owner_identity_id"`
}
