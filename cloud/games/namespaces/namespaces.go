// This file was auto-generated by Fern from our API Definition.

package namespaces

import (
	uuid "github.com/google/uuid"
	rivetgo "github.com/rivet-gg/rivet-go"
	cloud "github.com/rivet-gg/rivet-go/cloud"
	matchmaker "github.com/rivet-gg/rivet-go/cloud/version/matchmaker"
)

type AddNamespaceDomainRequest struct {
	// A valid domain name (no protocol).
	Domain string `json:"domain"`
}

type CreateGameNamespaceRequest struct {
	// Represent a resource's readable display name.
	DisplayName string    `json:"display_name"`
	VersionId   uuid.UUID `json:"version_id"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string `json:"name_id"`
}

type CreateGameNamespaceResponse struct {
	NamespaceId uuid.UUID `json:"namespace_id"`
}

type CreateGameNamespaceTokenDevelopmentRequest struct {
	// The hostname used for the token.
	Hostname string                                      `json:"hostname"`
	Ports    map[string]*cloud.MatchmakerDevelopmentPort `json:"ports,omitempty"`
	// **Deprecated**
	// A list of docker ports.
	LobbyPorts []*matchmaker.LobbyGroupRuntimeDockerPort `json:"lobby_ports,omitempty"`
}

type CreateGameNamespaceTokenDevelopmentResponse struct {
	// A JSON Web Token.
	// Slightly modified to include a description prefix and use Protobufs of
	// JSON.
	Token string `json:"token"`
}

type CreateGameNamespaceTokenPublicResponse struct {
	// A JSON Web Token.
	// Slightly modified to include a description prefix and use Protobufs of
	// JSON.
	Token string `json:"token"`
}

type GetGameNamespaceByIdResponse struct {
	Namespace *cloud.NamespaceFull `json:"namespace,omitempty"`
}

type GetGameNamespaceVersionHistoryResponse struct {
	// A list of previously deployed namespace versions.
	Versions []*cloud.NamespaceVersion `json:"versions,omitempty"`
}

type SetNamespaceCdnAuthTypeRequest struct {
	AuthType cloud.CdnAuthType `json:"auth_type,omitempty"`
}

type ToggleNamespaceDomainPublicAuthRequest struct {
	// Whether or not to enable authentication based on domain.
	Enabled bool `json:"enabled"`
}

type UpdateGameNamespaceMatchmakerConfigRequest struct {
	// Unsigned 32 bit integer.
	LobbyCountMax int `json:"lobby_count_max"`
	// Unsigned 32 bit integer.
	MaxPlayers int `json:"max_players"`
}

type UpdateGameNamespaceVersionRequest struct {
	VersionId uuid.UUID `json:"version_id"`
}

type UpdateNamespaceCdnAuthUserRequest struct {
	// A user name.
	User string `json:"user"`
	// A bcrypt encrypted password. An error is returned if the given string is not properly encrypted.
	Password string `json:"password"`
}

type ValidateGameNamespaceMatchmakerConfigRequest struct {
	// Unsigned 32 bit integer.
	LobbyCountMax int `json:"lobby_count_max"`
	// Unsigned 32 bit integer.
	MaxPlayers int `json:"max_players"`
}

type ValidateGameNamespaceMatchmakerConfigResponse struct {
	// A list of validation errors.
	Errors []*rivetgo.ValidationError `json:"errors,omitempty"`
}

type ValidateGameNamespaceRequest struct {
	// Represent a resource's readable display name.
	DisplayName string `json:"display_name"`
	// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
	NameId string `json:"name_id"`
}

type ValidateGameNamespaceResponse struct {
	// A list of validation errors.
	Errors []*rivetgo.ValidationError `json:"errors,omitempty"`
}

type ValidateGameNamespaceTokenDevelopmentRequest struct {
	Hostname string `json:"hostname"`
	// A list of docker ports.
	LobbyPorts []*matchmaker.LobbyGroupRuntimeDockerPort `json:"lobby_ports,omitempty"`
}

type ValidateGameNamespaceTokenDevelopmentResponse struct {
	// A list of validation errors.
	Errors []*rivetgo.ValidationError `json:"errors,omitempty"`
}
