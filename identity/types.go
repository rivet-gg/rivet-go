// This file was auto-generated by Fern from our API Definition.

package identity

import (
	fmt "fmt"
	uuid "github.com/google/uuid"
	rivetgo "github.com/rivet-gg/rivet-go"
	game "github.com/rivet-gg/rivet-go/common/game"
	group "github.com/rivet-gg/rivet-go/common/group"
	identity "github.com/rivet-gg/rivet-go/common/identity"
	matchmaker "github.com/rivet-gg/rivet-go/matchmaker"
	time "time"
)

type GetHandlesRequest struct {
	IdentityIds []string `json:"-"`
}

type GetProfileRequest struct {
	WatchIndex rivetgo.WatchQuery `json:"-"`
}

type GetSelfProfileRequest struct {
	WatchIndex rivetgo.WatchQuery `json:"-"`
}

type GetSummariesRequest struct {
	IdentityIds []string `json:"-"`
}

type ListFollowersRequest struct {
	Anchor *string `json:"-"`
	// Range is between 1 and 32 (inclusive).
	Limit *string `json:"-"`
}

type ListFollowingRequest struct {
	Anchor *string `json:"-"`
	// Range is between 1 and 32 (inclusive).
	Limit *string `json:"-"`
}

type ListFriendsRequest struct {
	Anchor *string `json:"-"`
	// Range is between 1 and 32 (inclusive).
	Limit *string `json:"-"`
}

type ListMutualFriendsRequest struct {
	Anchor *string `json:"-"`
	// Range is between 1 and 32 (inclusive).
	Limit *string `json:"-"`
}

type ListRecentFollowersRequest struct {
	Count      *int                `json:"-"`
	WatchIndex *rivetgo.WatchQuery `json:"-"`
}

type PrepareAvatarUploadRequest struct {
	Path string `json:"path"`
	// See https://www.iana.org/assignments/media-types/media-types.xhtml
	Mime          string `json:"mime"`
	ContentLength int64  `json:"content_length"`
}

type ReportRequest struct {
	Reason *string `json:"reason,omitempty"`
}

type SearchRequest struct {
	// The query to match identity display names and account numbers against.
	Query string `json:"-"`
	// How many identities to offset the search by.
	Anchor *string `json:"-"`
	// Amount of identities to return. Must be between 1 and 32 inclusive.
	Limit *int `json:"-"`
}

type SetGameActivityRequest struct {
	GameActivity *UpdateGameActivity `json:"game_activity,omitempty"`
}

type SetupRequest struct {
	ExistingIdentityToken *rivetgo.Jwt `json:"existing_identity_token,omitempty"`
}

type SignupForBetaRequest struct {
	Name           string  `json:"name"`
	CompanyName    *string `json:"company_name,omitempty"`
	CompanySize    string  `json:"company_size"`
	PreferredTools string  `json:"preferred_tools"`
	Goals          string  `json:"goals"`
}

// An identity's access token identity.
type AccessTokenLinkedAccount struct {
	Name string `json:"name"`
}

// The state of the given identity's developer status.
type DevState string

const (
	DevStateInactive DevState = "inactive"
	DevStatePending  DevState = "pending"
	DevStateAccepted DevState = "accepted"
)

func NewDevStateFromString(s string) (DevState, error) {
	switch s {
	case "inactive":
		return DevStateInactive, nil
	case "pending":
		return DevStatePending, nil
	case "accepted":
		return DevStateAccepted, nil
	}
	var t DevState
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (d DevState) Ptr() *DevState {
	return &d
}

// An identity's linked email.
type EmailLinkedAccount struct {
	Email rivetgo.Email `json:"email"`
}

type GameLinkStatus string

const (
	GameLinkStatusIncomplete GameLinkStatus = "incomplete"
	GameLinkStatusComplete   GameLinkStatus = "complete"
	GameLinkStatusCancelled  GameLinkStatus = "cancelled"
)

func NewGameLinkStatusFromString(s string) (GameLinkStatus, error) {
	switch s {
	case "incomplete":
		return GameLinkStatusIncomplete, nil
	case "complete":
		return GameLinkStatusComplete, nil
	case "cancelled":
		return GameLinkStatusCancelled, nil
	}
	var t GameLinkStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GameLinkStatus) Ptr() *GameLinkStatus {
	return &g
}

// An event relevant to the current identity.
type GlobalEvent struct {
	Ts           time.Time                `json:"ts"`
	Kind         *GlobalEventKind         `json:"kind,omitempty"`
	Notification *GlobalEventNotification `json:"notification,omitempty"`
}

type GlobalEventIdentityUpdate struct {
	Identity *Profile `json:"identity,omitempty"`
}

type GlobalEventKind struct {
	IdentityUpdate      *GlobalEventIdentityUpdate      `json:"identity_update,omitempty"`
	MatchmakerLobbyJoin *GlobalEventMatchmakerLobbyJoin `json:"matchmaker_lobby_join,omitempty"`
}

type GlobalEventMatchmakerLobbyJoin struct {
	Lobby  *matchmaker.JoinLobby           `json:"lobby,omitempty"`
	Ports  map[string]*matchmaker.JoinPort `json:"ports,omitempty"`
	Player *matchmaker.JoinPlayer          `json:"player,omitempty"`
}

// Notifications represent information that should be presented to the user
// immediately.
// At the moment, only chat message events have associated notifications.
// # Display
// Notifications should be displayed in an unobtrusive manner throughout the
// entire game. Notifications should disappear after a few seconds if not
// interacted with.
// # Interactions
// If your platform supports it, notifications should be able to be clicked or
// tapped in order to open the relevant context for the event.
// For a simple implementation of notification interactions, open `url` in a
// web browser to present the relevant context. For example, a chat message
// notification will open the thread the chat message was sent in.
// For advanced implementations that implement a custom chat UI, use
// `GlobalEvent.kind` to determine what action to take when the notification is interacted with.
// For example, if the global event kind is `GlobalEventChatMessage`, then open
// the chat UI for the given thread.
type GlobalEventNotification struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	// URL to an image thumbnail that should be shown for this notification.
	ThumbnailUrl string `json:"thumbnail_url"`
	// Rivet Hub URL that holds the relevant context for this notification.
	Url string `json:"url"`
}

// A group that the given identity.
type Group struct {
	Group *group.Handle `json:"group,omitempty"`
}

// A union representing an identity's linked accounts.
type LinkedAccount struct {
	Email       *EmailLinkedAccount       `json:"email,omitempty"`
	AccessToken *AccessTokenLinkedAccount `json:"access_token,omitempty"`
}

// An identity profile.
type Profile struct {
	IdentityId    uuid.UUID             `json:"identity_id"`
	DisplayName   rivetgo.DisplayName   `json:"display_name"`
	AccountNumber rivetgo.AccountNumber `json:"account_number"`
	// The URL of this identity's avatar image.
	AvatarUrl string             `json:"avatar_url"`
	Presence  *identity.Presence `json:"presence,omitempty"`
	// Whether or not this identity is registered with a linked account.
	IsRegistered bool                    `json:"is_registered"`
	External     *identity.ExternalLinks `json:"external,omitempty"`
	// Whether or not this identity is an admin.
	IsAdmin bool `json:"is_admin"`
	// Whether or not this game user has been linked through the Rivet dashboard.
	IsGameLinked *bool `json:"is_game_linked,omitempty"`
	// **Deprecated**
	DevState       *DevState `json:"dev_state,omitempty"`
	FollowerCount  int64     `json:"follower_count"`
	FollowingCount int64     `json:"following_count"`
	// Whether or not the requestee's identity is following this identity.
	Following bool `json:"following"`
	// Whether or not this identity is both followng and is followed by the requestee's identity.
	IsFollowingMe     bool                `json:"is_following_me"`
	IsMutualFollowing bool                `json:"is_mutual_following"`
	JoinTs            time.Time           `json:"join_ts"`
	Bio               rivetgo.Bio         `json:"bio"`
	LinkedAccounts    []*LinkedAccount    `json:"linked_accounts,omitempty"`
	Groups            []*Group            `json:"groups,omitempty"`
	Games             []*game.StatSummary `json:"games,omitempty"`
	// Whether or not this identity is awaiting account deletion. Only visible to when the requestee is
	// this identity.
	AwaitingDeletion *bool `json:"awaiting_deletion,omitempty"`
}

// An identity summary.
type Summary struct {
	IdentityId    uuid.UUID             `json:"identity_id"`
	DisplayName   rivetgo.DisplayName   `json:"display_name"`
	AccountNumber rivetgo.AccountNumber `json:"account_number"`
	// The URL of this identity's avatar image.
	AvatarUrl string             `json:"avatar_url"`
	Presence  *identity.Presence `json:"presence,omitempty"`
	// Whether or not this identity is registered with a linked account.
	IsRegistered bool                    `json:"is_registered"`
	External     *identity.ExternalLinks `json:"external,omitempty"`
	// Whether or not the requestee's identity is following this identity.
	Following bool `json:"following"`
	// Whether or not this identity is both followng and is followed by the requestee's identity.
	IsFollowingMe     bool `json:"is_following_me"`
	IsMutualFollowing bool `json:"is_mutual_following"`
}

// Information about the identity's current game. This is information that all other identities can see about what the current identity is doing.
type UpdateGameActivity struct {
	// A short message about the current game activity.
	Message *string `json:"message,omitempty"`
	// JSON data seen by anyone.
	PublicMetadata interface{} `json:"public_metadata,omitempty"`
	// JSON data seen only by the given identity and their mutual followers.
	MutualMetadata interface{} `json:"mutual_metadata,omitempty"`
}

type GetGameLinkNewIdentity struct {
	IdentityToken         rivetgo.Jwt `json:"identity_token"`
	IdentityTokenExpireTs time.Time   `json:"identity_token_expire_ts"`
	Identity              *Profile    `json:"identity,omitempty"`
}

type UpdateProfileRequest struct {
	DisplayName   *rivetgo.DisplayName   `json:"display_name,omitempty"`
	AccountNumber *rivetgo.AccountNumber `json:"account_number,omitempty"`
	Bio           *rivetgo.Bio           `json:"bio,omitempty"`
}

type UpdateStatusRequest struct {
	Status identity.Status `json:"status,omitempty"`
}

type ValidateProfileRequest struct {
	DisplayName   *rivetgo.DisplayName   `json:"display_name,omitempty"`
	AccountNumber *rivetgo.AccountNumber `json:"account_number,omitempty"`
	Bio           *rivetgo.Bio           `json:"bio,omitempty"`
}
